@page "/Creates/CreateCompany"

@attribute [Authorize]
@inject NavigationManager Navigation
@inject HttpClient http

<style>
    .box1 {
        padding-left: 50%;
        border: ridge;
        margin-left: -25%;
    }
    .box3 {
        margin-left: -25%;
        margin-top: 1%;
    }

    .box2 {
        padding: 10%;
        padding-left: 50%;
        border: ridge;
        margin-left: -25%;
    }
</style>
<div class="box1">
    <h3>Create Company</h3>
</div>

<div class="box3">

    <p>
        <a class="btn btn-primary" href="/ExistingProject">Dashboard</a>

    </p>


</div>
<div class="box2">

    <EditForm Model="company" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label class="control-label">Name</label>
            <InputText @bind-Value="company.CompanyName"></InputText>
            <ValidationMessage For="@(()=>company.CompanyName)" />
        </div>
        <div class="form-group">
            <label class="control-label">Description</label>
            <InputText @bind-Value="company.Description"></InputText>
            <ValidationMessage For="@(()=>company.Description)" />


        </div>
        <button type="submit" class="btn btn-primary">Submit</button>

    </EditForm>
</div>
@code {
    private Company company { get; set; } = new Company();
    private async void HandleValidSubmit()
    {
        try
        {
            var response = await http.PostAsJsonAsync("/api/Company", company);
            response.EnsureSuccessStatusCode();

            var content = await response.Content.ReadAsStringAsync();
            var companies = JsonConvert.DeserializeObject<Project>(content);
            Navigation.NavigateTo($"Views/board");
        }
        catch (Exception)
        {

            throw;
        }


    }

}


